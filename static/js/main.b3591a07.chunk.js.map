{"version":3,"sources":["components/getDate.js","components/tempConvert.js","components/CurrentWeatherWidget.jsx","components/HourlyWeatherWidget.jsx","components/DailyWeatherWidget.jsx","components/Weather.jsx","components/callApi.js","components/getLocation.js","App.jsx","reportWebVitals.js","index.js"],"names":["epochTimeToLocalTime","epochTime","Spacetime","format","convertKelvinTo","temp","to","Math","round","CurrentWeatherWidget","props","Weather","styled","div","TransparentButton","button","this","city","country","displayName","feelsLike","main","humidity","sunrise","sunset","icon","imperial","locationHandler","preciseLocation","onClick","disabled","style","opacity","Icon","name","src","alt","Component","HourlyWeatherWidget","WeatherWrapper","weather","jsxArray","map","item","index","n","hour","now","add","padding","weatherMain","textAlign","DailyWeatherWidget","date","day","night","whiteSpace","updateStateLocation","latitude","longitude","setState","location","updateWeather","state","callback","axios","get","then","response","catch","error","console","log","callWeatherApi","handleWeatherResponse","callReverseGeocodingApi","handleReverseGeocodingResponse","data","current","feels_like","currentWeatherObject","hourlyWeatherArray","hourly","forEach","nthHour","indexOf","push","dailyWeatherArray","daily","nthDay","weatherInfoReady","currentWeather","hourlyWeather","dailyWeather","lat","lon","address","display_name","id","window","navigator","geolocation","getCurrentPosition","responseFromNavigator","coords","Segment","width","height","Dimmer","active","inverted","Loader","indeterminate","Image","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b3591a07.chunk.js","sourcesContent":["import Spacetime from 'spacetime';\r\n\r\n/**\r\n * returns date 'n' days from now\r\n * @param {number} n\r\n */\r\nexport const dateDaysFromNow = (n) => {\r\n  const nDaysAfter = Spacetime.now().add(n, 'day').format('{day} {date}');\r\n  return nDaysAfter;\r\n};\r\n\r\n/**\r\n * returns hours 'n' hours from now\r\n * @param {number} n\r\n */\r\nexport const hoursHoursFromNow = (n) => {\r\n  const nHoursAfter = Spacetime.now().add(n, 'hour').format('{hour} {ampm}');\r\n  return nHoursAfter;\r\n};\r\n\r\n/**\r\n * converts epoch time to hours and minutes\r\n * @param {number} epochTime\r\n */\r\nexport const epochTimeToLocalTime = (epochTime) => {\r\n  const localFromEpoch = Spacetime(epochTime * 1000).format('{time}');\r\n  return localFromEpoch;\r\n};\r\n","/**\r\n * convert kelvin to celcius or fahrenheit, returns a rounded integer\r\n * @param {number} temp\r\n * @param {string} to\r\n */\r\nexport const convertKelvinTo = (temp, to) => {\r\n  if (to === 'c') {\r\n    const newTemp = Math.round(temp - 273.15);\r\n    return newTemp;\r\n  }\r\n  if (to === 'f') {\r\n    const newTemp = Math.round((temp - 273.15) * (9 / 5) + 32);\r\n    return newTemp;\r\n  } else return temp;\r\n};\r\n","import React, { Component } from 'react';\r\nimport styled from 'styled-components';\r\nimport { Icon } from 'semantic-ui-react';\r\nimport { epochTimeToLocalTime } from './getDate';\r\nimport { convertKelvinTo } from './tempConvert';\r\n\r\n// eslint-disable-next-line react/prefer-stateless-function\r\nclass CurrentWeatherWidget extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.Weather = styled.div`\r\n      max-width: max-content;\r\n      display: flex;\r\n      flex-direction: column;\r\n      align-items: center;\r\n      margin: 40px auto 20px auto;\r\n      div {\r\n        width: 100%;\r\n        display: flex;\r\n        justify-content: space-around;\r\n      }\r\n    `;\r\n\r\n    this.TransparentButton = styled.button`\r\n      background: none;\r\n      outline: none;\r\n      border: none;\r\n      color: inherit;\r\n      font-family: inherit;\r\n      font-size: inherit;\r\n      padding: 4px;\r\n    `;\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      city, country, displayName,\r\n      temp, feelsLike, main,\r\n      humidity, sunrise, sunset,\r\n      icon, imperial,\r\n      locationHandler, preciseLocation,\r\n    } = this.props;\r\n\r\n    return (\r\n      <this.Weather>\r\n        {\r\n          preciseLocation ? (\r\n            <this.TransparentButton onClick={locationHandler} disabled style={{ opacity: '0.7' }}>\r\n              Use precise location \r\n              <Icon name='location arrow' />\r\n            </this.TransparentButton>\r\n          ) : (\r\n            <this.TransparentButton onClick={locationHandler}>\r\n              Use precise location \r\n              <Icon name=\"location arrow\" />\r\n            </this.TransparentButton>\r\n          )\r\n        }\r\n\r\n        {\r\n        city ? (\r\n          <h1>\r\n            {city}, {country}\r\n          </h1>\r\n        ) : <h1>{displayName}</h1>\r\n        }\r\n        <img src={`http://openweathermap.org/img/wn/${icon}@2x.png`} alt='main weather icon' />\r\n        <div>\r\n          <h2>{imperial ? `${convertKelvinTo(temp, 'f')} °F` : `${convertKelvinTo(temp, 'c')} °C`}</h2>\r\n          <h2>{main}</h2>\r\n        </div>\r\n        <h4>\r\n          Feels like: {imperial ? `${convertKelvinTo(feelsLike, 'f')} °F` : `${convertKelvinTo(feelsLike, 'c')} °C`}\r\n        </h4>\r\n        <h4>\r\n          Humidity: {humidity}%\r\n        </h4>\r\n        <div>\r\n          <div>\r\n            <h4>\r\n              Sunrise: \r\n              {epochTimeToLocalTime(sunrise)}\r\n            </h4>\r\n          </div>\r\n          <div>\r\n            <h4>\r\n              Sunset: \r\n              {epochTimeToLocalTime(sunset)}\r\n            </h4>\r\n          </div>\r\n        </div>\r\n      </this.Weather>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CurrentWeatherWidget;\r\n","import React, { Component } from 'react';\r\nimport styled from 'styled-components';\r\nimport { hoursHoursFromNow } from './getDate';\r\nimport { convertKelvinTo } from './tempConvert';\r\n\r\n// eslint-disable-next-line react/prefer-stateless-function\r\nclass HourlyWeatherWidget extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.Weather = styled.div`\r\n      max-width: 70%;\r\n      margin-left: auto;\r\n      margin-right: auto;\r\n    `;\r\n\r\n    this.WeatherWrapper = styled.div`\r\n      display: flex;\r\n      justify-content: flex-start;\r\n      width: 100%;\r\n      padding: 10px;\r\n      margin: 20px auto 10px auto;\r\n      overflow-x: scroll;\r\n    `;\r\n  }\r\n\r\n  render() {\r\n    const { weather, imperial } = this.props;\r\n    const jsxArray = weather.map((item, index) => {\r\n      const hour = hoursHoursFromNow(index);\r\n\r\n      return (\r\n        <div key={index} style={{ padding: '10px' }}>\r\n          <h4>\r\n            {imperial ? `${convertKelvinTo(item.temp, 'f')} °F` : `${convertKelvinTo(item.temp, 'c')} °C`}\r\n          </h4>\r\n          <img src={`http://openweathermap.org/img/wn/${item.icon}.png`} alt={`${item.weatherMain} icon`} />\r\n          <h4>{item.weatherMain}</h4>\r\n          <hr />\r\n          <h4>{hour}</h4>\r\n        </div>\r\n      );\r\n    });\r\n\r\n    return (\r\n      <this.Weather>\r\n        <h2 style={{ textAlign: 'left' }}>Hourly</h2>\r\n        <this.WeatherWrapper>\r\n          {jsxArray || null}\r\n        </this.WeatherWrapper>\r\n      </this.Weather>\r\n    );\r\n  }\r\n}\r\n\r\nexport default HourlyWeatherWidget;\r\n","import React, { Component } from 'react';\r\nimport styled from 'styled-components';\r\nimport { dateDaysFromNow } from './getDate';\r\nimport { convertKelvinTo } from './tempConvert';\r\n\r\n// eslint-disable-next-line react/prefer-stateless-function\r\nclass DailyWeatherWidget extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.Weather = styled.div`\r\n      max-width: 70%;\r\n      margin-left: auto;\r\n      margin-right: auto;\r\n    `;\r\n\r\n    this.WeatherWrapper = styled.div`\r\n      display: flex;\r\n      justify-content: flex-start;\r\n      width: 100%;\r\n      padding: 10px;      \r\n      margin: 20px auto 10px auto;\r\n      overflow-x: scroll;\r\n    `;\r\n  }\r\n\r\n  render() {\r\n    const { weather, imperial } = this.props;\r\n    const jsxArray = weather.map((item, index) => {\r\n      const date = dateDaysFromNow(index);\r\n\r\n      const temp = {\r\n        day: (imperial ? `${convertKelvinTo(item.temp.day, 'f')} °F` : `${convertKelvinTo(item.temp.day, 'c')} °C`),\r\n        night: (imperial ? `${convertKelvinTo(item.temp.night, 'f')} °F` : `${convertKelvinTo(item.temp.night, 'c')} °C`),\r\n      };\r\n\r\n      return (\r\n        <div key={index} style={{ padding: '10px' }}>\r\n          <h4 style={{ whiteSpace: 'nowrap'}}>🔆{temp.day} /🌙 {temp.night}</h4>\r\n          <h4 style={{ whiteSpace: 'pre-wrap' }}>{date}</h4>\r\n        </div>\r\n      );\r\n    });\r\n\r\n    return (\r\n      <this.Weather>\r\n        <h2 style={{ textAlign: 'left' }}>Daily</h2>\r\n        <this.WeatherWrapper>\r\n          {jsxArray || null}\r\n        </this.WeatherWrapper>\r\n      </this.Weather>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DailyWeatherWidget;\r\n","import React, { Component } from 'react';\r\nimport { Dimmer, Loader, Image, Segment } from 'semantic-ui-react';\r\nimport { getLocationFromIP, getLocationFromNavigator } from './getLocation';\r\nimport { callReverseGeocodingApi, callWeatherApi } from './callApi';\r\nimport CurrentWeatherWidget from './CurrentWeatherWidget';\r\nimport HourlyWeatherWidget from './HourlyWeatherWidget';\r\nimport DailyWeatherWidget from './DailyWeatherWidget';\r\n\r\n// eslint-disable-next-line react/prefer-stateless-function\r\nclass Weather extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      preciseLocation: false,\r\n      weatherInfoReady: false,\r\n      imperial: false,\r\n      location: {\r\n        latitude: null,\r\n        longitude: null,\r\n        city: null,\r\n        country: null,\r\n        displayName: null,\r\n        id: null,\r\n      },\r\n      currentWeather: {\r\n        temp: null,\r\n        feelsLike: null,\r\n        weatherMain: null,\r\n        humidity: null,\r\n        sunrise: null,\r\n        sunset: null,\r\n        icon: null,\r\n      },\r\n      hourlyWeather: [\r\n        {\r\n          temp: null,\r\n          weatherMain: null,\r\n          icon: null,\r\n        },\r\n      ],\r\n      dailyWeather: [\r\n        {\r\n          temp: {\r\n            day: null,\r\n            night: null,\r\n          },\r\n          weatherMain: null,\r\n          humidity: null,\r\n          icon: null,\r\n        },\r\n      ],\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    getLocationFromIP(this.updateStateLocation);\r\n  }\r\n\r\n  /**\r\n   * updates the location in the state of the component\r\n   * @param {number} latitude \r\n   * @param {number} longitude \r\n   * @param {boolean} preciseLocation \r\n   */\r\n  updateStateLocation = (latitude, longitude, preciseLocation) => {\r\n    this.setState({\r\n      preciseLocation,\r\n      location: {\r\n        latitude,\r\n        longitude,\r\n      },\r\n    });\r\n\r\n    this.updateWeather();\r\n  }\r\n\r\n  /**\r\n   * updates the weather and place names with the present geocoordinates in the component state\r\n   */\r\n  updateWeather = () => {\r\n    const { latitude, longitude } = this.state.location;\r\n    callWeatherApi(this.handleWeatherResponse, latitude, longitude);\r\n    callReverseGeocodingApi(this.handleReverseGeocodingResponse, latitude, longitude);\r\n  }\r\n\r\n  /**\r\n   * processes the response from weather api and updates the state\r\n   * @param {object} response \r\n   */\r\n  handleWeatherResponse = (response) => {\r\n    //  current weather config\r\n    const { temp, feels_like, weather, humidity, sunrise, sunset } = response.data.current;\r\n    const currentWeatherObject = {\r\n      temp,\r\n      feelsLike: feels_like,\r\n      weatherMain: weather[0].main,\r\n      humidity,\r\n      icon: weather[0].icon,\r\n      sunrise,\r\n      sunset,\r\n    };\r\n\r\n    //  hourly weather config\r\n    const hourlyWeatherArray = [];\r\n    response.data.hourly.forEach(nthHour => {\r\n      if (response.data.hourly.indexOf(nthHour) < 24) {\r\n        const hour = {\r\n          temp: nthHour.temp,\r\n          weatherMain: nthHour.weather[0].main,\r\n          icon: nthHour.weather[0].icon,\r\n        };\r\n        hourlyWeatherArray.push(hour);\r\n      }\r\n    });\r\n\r\n    //  daily weather config\r\n    const dailyWeatherArray = [];\r\n    response.data.daily.forEach(nthDay => {\r\n      if (response.data.daily.indexOf(nthDay) < 8) {\r\n        const day = {\r\n          temp: {\r\n            day: nthDay.temp.day,\r\n            night: nthDay.temp.night,\r\n          },\r\n          weatherMain: nthDay.weather[0].main,\r\n          humidity: nthDay.humidity,\r\n          icon: nthDay.weather[0].icon,\r\n        };\r\n        dailyWeatherArray.push(day);\r\n      }\r\n    });\r\n\r\n    //  state update\r\n    this.setState({\r\n      weatherInfoReady: true,\r\n      currentWeather: currentWeatherObject,\r\n      hourlyWeather: hourlyWeatherArray,\r\n      dailyWeather: dailyWeatherArray,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * processes the response from reverse geocoding api and updates the state\r\n   * @param {object} response \r\n   */\r\n  handleReverseGeocodingResponse = (response) => {\r\n    const { lat, lon, address, display_name } = response.data;\r\n\r\n    this.setState(\r\n      {\r\n        location: {\r\n          latitude: lat,\r\n          longitude: lon,\r\n          city: (address.city ? address.city : null),\r\n          country: address.country,\r\n          displayName: display_name,\r\n        },\r\n      },\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const { weatherInfoReady, imperial, preciseLocation, hourlyWeather, dailyWeather } = this.state;\r\n    const { city, country, displayName } = this.state.location;\r\n    const { temp, feelsLike, weatherMain, humidity, icon, sunrise, sunset } = this.state.currentWeather;\r\n\r\n    if (weatherInfoReady) {\r\n      return (\r\n        <div>\r\n          <CurrentWeatherWidget\r\n            city={city} country={country} displayName={displayName}\r\n            temp={temp} feelsLike={feelsLike} main={weatherMain}\r\n            humidity={humidity} icon={icon}\r\n            sunrise={sunrise} sunset={sunset}\r\n            imperial={imperial}\r\n            locationHandler={() => getLocationFromNavigator(this.updateStateLocation)} preciseLocation={preciseLocation}\r\n          />\r\n          <HourlyWeatherWidget weather={hourlyWeather} imperial={imperial} />\r\n          <DailyWeatherWidget weather={dailyWeather} imperial={imperial} />\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div>\r\n          <Segment style={{ width: '100vw', height: '100vh' }}>\r\n            <Dimmer active inverted>\r\n              <Loader indeterminate inverted>\r\n                <h1>Please wait...</h1>\r\n                <h3>Fetching data</h3>\r\n                <h4>Stuck? Try turning off an ad-blocking software</h4>\r\n              </Loader>\r\n            </Dimmer>\r\n            <Image src='/images/wireframe/short-paragraph.png' />\r\n          </Segment>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default Weather;\r\n","import axios from 'axios';\r\n\r\n/**\r\n * connects to openWeatherMap api and sends back the response to the callback \r\n * @param {Function} callback \r\n * @param {number} latitude \r\n * @param {number} longitude \r\n */\r\nexport const callWeatherApi = (callback, latitude, longitude) => {\r\n  axios.get(`https://api.openweathermap.org/data/2.5/onecall?lat=${latitude}&lon=${longitude}&&appid=997d9b54abada6ff84291820778b192d`)\r\n    .then(response => callback(response))\r\n    .catch(error => {\r\n      console.log(`Error happened while calling the API: \\n ${error}`)\r\n    });\r\n};\r\n\r\n/**\r\n * connects to locationIq reverse geocoding api and sends back the response to the callback\r\n * @param {Function} callback \r\n * @param {number} latitude \r\n * @param {number} longitude \r\n */\r\nexport const callReverseGeocodingApi = (callback, latitude, longitude) => {\r\n  axios.get(`https://us1.locationiq.com/v1/reverse.php?key=pk.026f9b5e94ef539558116a8c355cd29f&lat=${latitude}&lon=${longitude}&zoom=10&format=json`)\r\n    .then(response => callback(response))\r\n    .catch(error => {\r\n      console.log(`Error happened while calling the API: \\n ${error}`)\r\n    });\r\n};\r\n","import axios from 'axios';\r\n\r\n/**\r\n * connects to ipapi.co api returning geocoordinates from client ip address to the callback\r\n * @param {Function} callback \r\n */\r\nexport const getLocationFromIP = (callback) => {\r\n  axios.get('https://ipapi.co/json/')\r\n    .then(response => {\r\n      const { latitude, longitude } = response.data;\r\n      callback(latitude, longitude, false);\r\n    })\r\n    .catch(error => {\r\n      console.log(`Error happened while calling the API: \\n ${error}`);\r\n    });\r\n};\r\n\r\n/**\r\n * connects to ipapi.co api returning geocoordinates from the Navigator API to the callback\r\n * @param {Function} callback \r\n */\r\nexport const getLocationFromNavigator = (callback) => {\r\n  const navigatorResponseHandler = (responseFromNavigator) => {\r\n    const { latitude, longitude } = responseFromNavigator.coords;\r\n    callback(latitude, longitude, false);\r\n  };\r\n  window.navigator.geolocation.getCurrentPosition(navigatorResponseHandler);\r\n};\r\n","// import logo from './logo.svg';\nimport React from 'react';\nimport 'semantic-ui-css/semantic.min.css';\nimport './App.css';\nimport Weather from './components/Weather';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Weather />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}