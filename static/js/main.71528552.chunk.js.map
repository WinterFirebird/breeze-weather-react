{"version":3,"sources":["components/getDate.js","components/tempConvert.js","components/CurrentWeatherWidget.jsx","components/HourlyWeatherWidget.jsx","components/DailyWeatherWidget.jsx","components/Weather.jsx","components/callApi.js","components/getLocation.js","App.jsx","reportWebVitals.js","index.js"],"names":["epochTimeToLocalTime","epochTime","Spacetime","format","convertKelvinTo","temp","to","Math","round","CurrentWeatherWidget","props","Weather","styled","div","TransparentButton","button","this","city","country","displayName","feelsLike","main","humidity","sunrise","sunset","icon","imperial","locationHandler","preciseLocation","onClick","disabled","style","opacity","Icon","name","src","Component","HourlyWeatherWidget","WeatherWrapper","jsxArray","weather","map","item","index","n","hour","now","add","padding","weatherMain","textAlign","DailyWeatherWidget","date","day","night","whiteSpace","updateStateLocation","position","from","latt","long","callback","latitude","longitude","data","coords","setState","location","handleWeatherResponse","state","axios","get","then","response","console","log","catch","err","callReverseGeocodingApi","handleReverseGeocodingResponse","current","feels_like","currentWeatherObject","hourlyWeatherArray","hourly","forEach","nthHour","indexOf","push","dailyWeatherArray","daily","nthDay","weatherInfoReady","currentWeather","hourlyWeather","dailyWeather","lat","lon","address","display_name","id","window","navigator","geolocation","getCurrentPosition","Segment","width","height","Dimmer","active","inverted","Loader","indeterminate","Image","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.71528552.chunk.js","sourcesContent":["import Spacetime from 'spacetime';\r\n\r\n/**\r\n * returns date 'n' days from now\r\n * @param {number} n \r\n */\r\nexport const dateDaysFromNow = (n) => {\r\n  const nDaysAfter = Spacetime.now().add(n, 'day').format('{day} {date}');\r\n  return(nDaysAfter);\r\n}\r\n\r\n/**\r\n * returns hours 'n' hours from now\r\n * @param {number} n \r\n */\r\nexport const hoursHoursFromNow = (n) => {\r\n  const nHoursAfter = Spacetime.now().add(n, 'hour').format('{hour} {ampm}');\r\n  return(nHoursAfter);\r\n}\r\n\r\n/**\r\n * returns converts epoch time to hours and minutes\r\n * @param {number} n \r\n */\r\nexport const epochTimeToLocalTime = (epochTime) => {\r\n  const localFromEpoch = Spacetime(epochTime*1000).format('{time}');\r\n  return localFromEpoch;\r\n} ","\r\n\r\n/**\r\n * convert kelvin to celcius or fahrenheit, returns an integer\r\n * @param {number} temp \r\n * @param {string} to \r\n */\r\nexport const convertKelvinTo = (temp, to) => {\r\n  if(to === 'c') {\r\n    const newTemp = Math.round(temp - 273.15)\r\n    return newTemp\r\n  }\r\n  if(to === 'f') {\r\n    const newTemp = Math.round((temp - 273.15)*(9/5) + 32)\r\n    return newTemp\r\n  } else return temp\r\n}","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { epochTimeToLocalTime } from './getDate';\r\nimport { convertKelvinTo } from './tempConvert';\r\nimport { Icon } from 'semantic-ui-react';\r\nimport styled from 'styled-components';\r\n\r\n// eslint-disable-next-line react/prefer-stateless-function\r\nclass CurrentWeatherWidget extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n  \r\n    this.Weather = styled.div`\r\n      max-width: max-content;\r\n      display: flex;\r\n      flex-direction: column;\r\n      align-items: center;\r\n      margin: 40px auto 20px auto;\r\n      div {\r\n        width:100%;\r\n        display:flex;\r\n        justify-content:space-around;\r\n      }\r\n    `;\r\n\r\n    this.TransparentButton = styled.button`\r\n      background: none;\r\n      outline: none;\r\n      border: none;\r\n      color: inherit;\r\n      font-family: inherit;\r\n      font-size: inherit;\r\n      padding:4px;\r\n    `;\r\n  }\r\n  \r\n  \r\n  render() {\r\n    const { city, country, displayName, temp, feelsLike, main, humidity, sunrise, sunset, icon, imperial, locationHandler, preciseLocation } = this.props;\r\n    return (\r\n      <this.Weather>\r\n        {preciseLocation ? <this.TransparentButton onClick={locationHandler} disabled style={{opacity: '0.7'}}>Use precise location <Icon name=\"location arrow\" /></this.TransparentButton> : \r\n        <this.TransparentButton onClick={locationHandler}>Use precise location <Icon name=\"location arrow\" /></this.TransparentButton>\r\n        }\r\n        { city? <h1>{city}, {country}</h1> : <h1>{displayName}</h1> }\r\n        <img src={`http://openweathermap.org/img/wn/${icon}@2x.png`} />\r\n        <div>\r\n          <h2>{imperial ? `${convertKelvinTo(temp, 'f')} °F` : `${convertKelvinTo(temp, 'c')} °C`}</h2>\r\n          <h2>{main}</h2>\r\n        </div>\r\n        <h4>\r\n          Feels like: {imperial ? `${convertKelvinTo(feelsLike, 'f')} °F` : `${convertKelvinTo(feelsLike, 'c')} °C`}\r\n        </h4>\r\n        <h4>\r\n          Humidity: {humidity}%\r\n        </h4>\r\n        <div>\r\n          <div>\r\n            <h4>Sunrise: {epochTimeToLocalTime(sunrise)}</h4>\r\n          </div>\r\n          <div>\r\n            <h4>Sunset: {epochTimeToLocalTime(sunset)}</h4>\r\n          </div>\r\n        </div>\r\n      </this.Weather>\r\n    );\r\n  }\r\n}\r\n\r\n// CurrentWeatherWidget.propTypes = {\r\n//   city: PropTypes.string,\r\n//   country: PropTypes.string,\r\n//   temp: PropTypes.number.isRequired,\r\n//   main: PropTypes.string.isRequired,\r\n//   humidity: PropTypes.string.isRequired,\r\n// };\r\n\r\nexport default CurrentWeatherWidget;\r\n","import React, { Component } from 'react';\r\nimport { hoursHoursFromNow } from './getDate';\r\nimport { convertKelvinTo } from './tempConvert';\r\nimport styled from 'styled-components';\r\n\r\n// eslint-disable-next-line react/prefer-stateless-function\r\nclass HourlyWeatherWidget extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.Weather = styled.div`\r\n      max-width: 70%;\r\n      margin-left: auto;\r\n      margin-right: auto;\r\n    `;\r\n\r\n    this.WeatherWrapper = styled.div`\r\n      display: flex;\r\n      justify-content: flex-start;\r\n      width: 100%;\r\n      padding: 10px;\r\n      margin: 20px auto 10px auto;\r\n      overflow-x: scroll;\r\n    `;\r\n  }\r\n  \r\n  render() {\r\n    let jsxArray = this.props.weather.map((item, index) => {\r\n      const hour = hoursHoursFromNow(index);\r\n    \r\n      return (\r\n        <div key={index} style={{padding: '10px'}}>\r\n          <h4>\r\n            {this.props.imperial ? `${convertKelvinTo(item.temp, 'f')} °F` : `${convertKelvinTo(item.temp, 'c')} °C`}\r\n          </h4>\r\n          <img src={`http://openweathermap.org/img/wn/${item.icon}.png`} />\r\n          <h4>{item.weatherMain}</h4>\r\n          <hr />\r\n          <h4>{hour}</h4>\r\n        </div>\r\n      )\r\n    });\r\n\r\n    return (\r\n      <this.Weather>\r\n      <h2 style={{textAlign: 'left'}}>Hourly</h2>\r\n        <this.WeatherWrapper>\r\n          {jsxArray ? jsxArray : null}\r\n        </this.WeatherWrapper>\r\n      </this.Weather>\r\n    )\r\n  }\r\n}\r\n\r\nexport default HourlyWeatherWidget;\r\n","import React, { Component } from 'react';\r\nimport { dateDaysFromNow } from './getDate'\r\nimport { convertKelvinTo } from './tempConvert';\r\nimport styled from 'styled-components';\r\n\r\n// eslint-disable-next-line react/prefer-stateless-function\r\nclass DailyWeatherWidget extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.Weather = styled.div`\r\n      max-width: 70%;\r\n      margin-left: auto;\r\n      margin-right: auto;\r\n    `;\r\n  \r\n    this.WeatherWrapper = styled.div`\r\n      display: flex;\r\n      justify-content: flex-start;\r\n      width: 100%;\r\n      padding: 10px;      \r\n      margin: 20px auto 10px auto;\r\n      overflow-x: scroll;\r\n    `;\r\n  }\r\n\r\n  render() {\r\n    let jsxArray = this.props.weather.map((item, index) => {\r\n      const date = dateDaysFromNow(index);\r\n      \r\n      let temp = {\r\n        day: ( this.props.imperial ? `${convertKelvinTo(item.temp.day, 'f')} °F` : `${convertKelvinTo(item.temp.day, 'c')} °C` ),\r\n        night: ( this.props.imperial ? `${convertKelvinTo(item.temp.night, 'f')} °F` : `${convertKelvinTo(item.temp.night, 'c')} °C` ),\r\n      }\r\n      return (\r\n        <div key={index} style={{padding: '10px'}}>\r\n          <h4>🔆{temp.day} /🌙 {temp.night}</h4>\r\n          <h4 style={{whiteSpace: 'pre-wrap'}}>{date}</h4>\r\n        </div>\r\n      )\r\n    });\r\n\r\n    return (\r\n      <this.Weather>\r\n        <h2 style={{textAlign: 'left'}}>Daily</h2>\r\n        <this.WeatherWrapper>\r\n          {jsxArray ? jsxArray : null}\r\n        </this.WeatherWrapper>\r\n      </this.Weather>\r\n    )\r\n  }\r\n}\r\n\r\nexport default DailyWeatherWidget;\r\n","import React, { Component } from 'react';\r\nimport CurrentWeatherWidget from './CurrentWeatherWidget';\r\nimport HourlyWeatherWidget from './HourlyWeatherWidget';\r\nimport DailyWeatherWidget from './DailyWeatherWidget';\r\nimport { Dimmer, Loader, Image, Segment } from 'semantic-ui-react';\r\nimport { getLocationFromIP, getLocationFromNavigator } from './getLocation';\r\nimport { callReverseGeocodingApi, callWeatherApi } from './callApi';\r\n\r\n// eslint-disable-next-line react/prefer-stateless-function\r\nclass Weather extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    \r\n    this.state = {\r\n      preciseLocation: false,\r\n      weatherInfoReady: false,\r\n      imperial: false,\r\n      location: {\r\n        latitude: null,\r\n        longitude: null,\r\n        city: null,\r\n        country: null,\r\n        displayName: null,\r\n        id: null,\r\n      },\r\n      currentWeather: {\r\n        temp: null,\r\n        feelsLike: null,\r\n        weatherMain: null,\r\n        humidity: null,\r\n        sunrise: null,\r\n        sunset: null,\r\n        icon: null,\r\n      },\r\n      hourlyWeather: [\r\n        {\r\n          temp: null,\r\n          weatherMain:  null,\r\n          icon: null,\r\n        }\r\n      ],\r\n      dailyWeather: [\r\n        {\r\n          temp: {\r\n            day: null,\r\n            night: null,\r\n          },\r\n          weatherMain: null,\r\n          humidity: null,\r\n          icon: null,\r\n        }\r\n      ]\r\n    }\r\n  }\r\n\r\n  updateStateLocation = (position, from) => {\r\n    let latt, long, preciseLocation;\r\n\r\n    if(from === 'ip') {\r\n      latt = position.data.latitude;\r\n      long = position.data.longitude;\r\n      preciseLocation = false;\r\n    } else {\r\n      latt = position.coords.latitude;\r\n      long = position.coords.longitude;\r\n      preciseLocation = true;\r\n    }\r\n    \r\n\r\n    this.setState({\r\n      preciseLocation: preciseLocation,\r\n      location: {\r\n        latitude: latt,\r\n        longitude: long,\r\n      }\r\n    });\r\n\r\n    callWeatherApi(this.handleWeatherResponse, this.state.location.latitude, this.state.location.longitude);\r\n    callReverseGeocodingApi(this.handleReverseGeocodingResponse, this.state.location.latitude, this.state.location.longitude);\r\n  };\r\n\r\n  handleWeatherResponse = (response) => {\r\n\r\n    //current weather config\r\n    let { temp, feels_like, weather, humidity, sunrise, sunset } = response.data.current;\r\n    let currentWeatherObject = {\r\n      temp: temp,\r\n      feelsLike: feels_like,\r\n      weatherMain: weather[0].main,\r\n      humidity: humidity,\r\n      icon: weather[0].icon,\r\n      sunrise: sunrise, \r\n      sunset: sunset,\r\n    };\r\n\r\n    //hourly weather config\r\n    let hourlyWeatherArray = [];\r\n    response.data.hourly.forEach(nthHour => {\r\n      if(response.data.hourly.indexOf(nthHour) < 24) {\r\n        let hour = {\r\n          temp: nthHour.temp,\r\n          weatherMain: nthHour.weather[0].main,\r\n          icon: nthHour.weather[0].icon,\r\n        }\r\n        hourlyWeatherArray.push(hour)\r\n      }\r\n    });\r\n\r\n    //daily weather config\r\n    let dailyWeatherArray = [];\r\n    response.data.daily.forEach(nthDay => {\r\n      if(response.data.daily.indexOf(nthDay) < 8) {\r\n        let day = {\r\n          temp: {\r\n            day: nthDay.temp.day,\r\n            night: nthDay.temp.night,\r\n          },\r\n          weatherMain: nthDay.weather[0].main,\r\n          humidity: nthDay.humidity,\r\n          icon: nthDay.weather[0].icon,\r\n        }\r\n        dailyWeatherArray.push(day)\r\n      }\r\n    })\r\n\r\n    //state update\r\n    this.setState({\r\n      weatherInfoReady: true,\r\n      currentWeather: currentWeatherObject,\r\n      hourlyWeather: hourlyWeatherArray,\r\n      dailyWeather: dailyWeatherArray\r\n    })\r\n\r\n  }\r\n\r\n  handleReverseGeocodingResponse = (response) => {\r\n    const {lat, lon, address, display_name} = response.data;\r\n\r\n    this.setState(\r\n      {\r\n        location: {\r\n          latitude: lat,\r\n          longitude:  lon,\r\n          city: (address.city? address.city : null),\r\n          country: address.country,\r\n          displayName: display_name,\r\n        }\r\n      }\r\n    )\r\n  }\r\n\r\n  componentDidMount() {\r\n    getLocationFromIP(this.updateStateLocation);\r\n  }\r\n    \r\n  render() {\r\n    if(this.state.weatherInfoReady) {\r\n      return (\r\n        <div>\r\n          <CurrentWeatherWidget \r\n            city={this.state.location.city} country={this.state.location.country} displayName={this.state.location.displayName}\r\n            temp={this.state.currentWeather.temp} feelsLike={this.state.currentWeather.feelsLike} main={this.state.currentWeather.weatherMain}\r\n            humidity={this.state.currentWeather.humidity} icon={this.state.currentWeather.icon}\r\n            sunrise={this.state.currentWeather.sunrise} sunset={this.state.currentWeather.sunset}\r\n            imperial={this.state.imperial}\r\n            locationHandler={() => getLocationFromNavigator(this.updateStateLocation)} preciseLocation={this.state.preciseLocation}\r\n          />\r\n          <HourlyWeatherWidget weather={this.state.hourlyWeather} imperial={this.state.imperial} />\r\n          <DailyWeatherWidget weather={this.state.dailyWeather} imperial={this.state.imperial} />\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div>\r\n          <Segment style={{width: '100vw', height: '100vh'}}>\r\n            <Dimmer active inverted>\r\n              <Loader indeterminate inverted>\r\n                <h1>Please wait...</h1>\r\n                <h3>Fetching data</h3>\r\n                <h4>If it's stuck, try turning off an ad-blocking software</h4>\r\n              </Loader>\r\n            </Dimmer>\r\n    \r\n            <Image src='/images/wireframe/short-paragraph.png' />\r\n          </Segment>\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n}\r\n\r\nexport default Weather\r\n","import axios from 'axios';\r\n\r\nexport const callWeatherApi = (callback, latitude, longitude) => {\r\n  axios.get(`https://api.openweathermap.org/data/2.5/onecall?lat=${latitude}&lon=${longitude}&&appid=997d9b54abada6ff84291820778b192d`)\r\n  .then(response => {\r\n    callback(response)\r\n    console.log(response)\r\n  })\r\n  .catch(err => console.log(err));\r\n};\r\n  \r\nexport const callReverseGeocodingApi = (callback, latitude, longitude) => {\r\n  axios.get(`https://us1.locationiq.com/v1/reverse.php?key=pk.026f9b5e94ef539558116a8c355cd29f&lat=${latitude}&lon=${longitude}&zoom=10&format=json`)\r\n  .then(response => callback(response))\r\n  .catch(err => console.log(err));\r\n};\r\n","import axios from 'axios';\r\n\r\nexport const getLocationFromIP = (callback) => {\r\n  axios.get('https://ipapi.co/json/')\r\n  .then(response => {\r\n    callback(response, 'ip');\r\n  })\r\n  .catch(err => console.log(err));\r\n};\r\n\r\nexport const getLocationFromNavigator = (callback) => {\r\n  window.navigator.geolocation.getCurrentPosition(callback);\r\n}","// import logo from './logo.svg';\nimport React from 'react';\nimport 'semantic-ui-css/semantic.min.css'\nimport './App.css';\nimport Weather from './components/Weather';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Weather />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}