{"version":3,"sources":["components/tempConvert.js","components/CurrentWeatherWidget.jsx","components/HourlyWeatherWidget.jsx","components/getDate.js","components/DailyWeatherWidget.jsx","components/Weather.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["convertKelvinTo","temp","to","Math","round","CurrentWeatherWidget","props","Weather","styled","div","TransparentButton","button","this","city","country","displayName","main","humidity","icon","imperial","locationHandler","onClick","Icon","name","src","Component","HourlyWeatherWidget","WeatherWrapper","jsxArray","weather","map","item","index","n","hour","Spacetime","now","add","format","style","padding","weatherMain","textAlign","DailyWeatherWidget","date","day","night","whiteSpace","getLocationFromIP","console","log","axios","get","then","response","setLocation","catch","err","getLocationFromNavigator","window","navigator","geolocation","getCurrentPosition","position","from","latt","long","data","lat","lon","coords","latitude","longitude","setState","location","callApi","state","handleOneCallResponse","handleLocationResponse","currentWeatherObject","current","hourlyWeatherArray","hourly","forEach","nthHour","indexOf","push","dailyWeatherArray","daily","nthDay","apiRequestReady","currentWeather","hourlyWeather","dailyWeather","address","display_name","id","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9ec26942.chunk.js","sourcesContent":["\r\n\r\n/**\r\n * convert kelvin to celcius or fahrenheit, returns an integer\r\n * @param {number} temp \r\n * @param {string} to \r\n */\r\nexport const convertKelvinTo = (temp, to) => {\r\n  if(to === 'c') {\r\n    const newTemp = Math.round(temp - 273.15)\r\n    return newTemp\r\n  }\r\n  if(to === 'f') {\r\n    const newTemp = Math.round((temp - 273.15)*(9/5) + 32)\r\n    return newTemp\r\n  } else return temp\r\n}","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { convertKelvinTo } from './tempConvert';\r\nimport { Icon } from 'semantic-ui-react';\r\nimport styled from 'styled-components';\r\n\r\n// eslint-disable-next-line react/prefer-stateless-function\r\nclass CurrentWeatherWidget extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n  \r\n    this.Weather = styled.div`\r\n      max-width: max-content;\r\n      display: flex;\r\n      flex-direction: column;\r\n      align-items: center;\r\n      margin: 40px auto 20px auto;\r\n      div {\r\n        width:100%;\r\n        display:flex;\r\n        justify-content:space-around;\r\n      }\r\n    `;\r\n\r\n    this.TransparentButton = styled.button`\r\n      background: none;\r\n      outline: none;\r\n      border: none;\r\n      color: inherit;\r\n      font-family: inherit;\r\n      font-size: inherit;\r\n      padding:4px;\r\n    `;\r\n  }\r\n  \r\n  \r\n  render() {\r\n    const { city, country, displayName, temp, main, humidity, icon, imperial, locationHandler } = this.props;\r\n    return (\r\n      <this.Weather>\r\n        <this.TransparentButton onClick={locationHandler}>Use precise location <Icon name=\"location arrow\" /></this.TransparentButton>\r\n        { city? <h1>{city}, {country}</h1> : <h1>{displayName}</h1> }\r\n        <img src={` http://openweathermap.org/img/wn/${icon}@2x.png`} />\r\n        <div>\r\n          <h2>{imperial ? `${convertKelvinTo(temp, 'f')} °F` : `${convertKelvinTo(temp, 'c')}°C`}</h2>\r\n          <h2>{main}</h2>\r\n        </div>\r\n        <h4>\r\n          Humidity: {humidity}%\r\n        </h4>\r\n      </this.Weather>\r\n    );\r\n  }\r\n}\r\n\r\n// CurrentWeatherWidget.propTypes = {\r\n//   city: PropTypes.string,\r\n//   country: PropTypes.string,\r\n//   temp: PropTypes.number.isRequired,\r\n//   main: PropTypes.string.isRequired,\r\n//   humidity: PropTypes.string.isRequired,\r\n// };\r\n\r\nexport default CurrentWeatherWidget;\r\n","import React, { Component } from 'react';\r\nimport { hoursHoursFromNow } from './getDate';\r\nimport { convertKelvinTo } from './tempConvert';\r\nimport styled from 'styled-components';\r\n\r\n// eslint-disable-next-line react/prefer-stateless-function\r\nclass HourlyWeatherWidget extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.Weather = styled.div`\r\n      max-width: 70%;\r\n      margin-left: auto;\r\n      margin-right: auto;\r\n    `;\r\n\r\n    this.WeatherWrapper = styled.div`\r\n      display: flex;\r\n      justify-content: flex-start;\r\n      width: 100%;\r\n      padding: 10px;\r\n      margin: 20px auto 10px auto;\r\n      overflow-x: scroll;\r\n    `;\r\n  }\r\n  \r\n  render() {\r\n    let jsxArray = this.props.weather.map((item, index) => {\r\n      const hour = hoursHoursFromNow(index);\r\n    \r\n      return (\r\n        <div key={index} style={{padding: '10px'}}>\r\n          <h4>\r\n            {this.props.imperial ? `${convertKelvinTo(item.temp, 'f')} °F` : `${convertKelvinTo(item.temp, 'c')} °C`}\r\n          </h4>\r\n          <img src={`http://openweathermap.org/img/wn/${item.icon}.png`} />\r\n          <h4>{item.weatherMain}</h4>\r\n          <hr />\r\n          <h4>{hour}</h4>\r\n        </div>\r\n      )\r\n    });\r\n\r\n    return (\r\n      <this.Weather>\r\n      <h2 style={{textAlign: 'left'}}>Hourly</h2>\r\n        <this.WeatherWrapper>\r\n          {jsxArray ? jsxArray : null}\r\n        </this.WeatherWrapper>\r\n      </this.Weather>\r\n    )\r\n  }\r\n}\r\n\r\nexport default HourlyWeatherWidget;\r\n","import Spacetime from 'spacetime';\r\n\r\n/**\r\n * returns date 'n' days from now\r\n * @param {number} n \r\n */\r\nexport const dateDaysFromNow = (n) => {\r\n  const nDaysAfter = Spacetime.now().add(n, 'day').format('{day} {date}');\r\n  return(nDaysAfter)\r\n}\r\n\r\nexport const hoursHoursFromNow = (n) => {\r\n  const nHoursAfter = Spacetime.now().add(n, 'hour').format('{hour} {ampm}');\r\n  return(nHoursAfter)\r\n}","import React, { Component } from 'react';\r\nimport {dateDaysFromNow} from './getDate'\r\nimport { convertKelvinTo } from './tempConvert';\r\nimport styled from 'styled-components';\r\n\r\n// eslint-disable-next-line react/prefer-stateless-function\r\nclass DailyWeatherWidget extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.Weather = styled.div`\r\n      max-width: 70%;\r\n      margin-left: auto;\r\n      margin-right: auto;\r\n    `;\r\n  \r\n    this.WeatherWrapper = styled.div`\r\n      display: flex;\r\n      justify-content: flex-start;\r\n      width: 100%;\r\n      padding: 10px;      \r\n      margin: 20px auto 10px auto;\r\n      overflow-x: scroll;\r\n    `;\r\n  }\r\n\r\n  render() {\r\n    let jsxArray = this.props.weather.map((item, index) => {\r\n      const date = dateDaysFromNow(index);\r\n      \r\n      let temp = {\r\n        day: ( this.props.imperial ? `${convertKelvinTo(item.temp.day, 'f')} °F` : `${convertKelvinTo(item.temp.day, 'c')} °C` ),\r\n        night: ( this.props.imperial ? `${convertKelvinTo(item.temp.night, 'f')} °F` : `${convertKelvinTo(item.temp.night, 'c')} °C` ),\r\n      }\r\n      return (\r\n        <div key={index} style={{padding: '10px'}}>\r\n          <h4>🔆{temp.day} /🌙 {temp.night}</h4>\r\n          <h4 style={{whiteSpace: 'pre-wrap'}}>{date}</h4>\r\n        </div>\r\n      )\r\n    });\r\n\r\n    return (\r\n      <this.Weather>\r\n        <h2 style={{textAlign: 'left'}}>Daily</h2>\r\n        <this.WeatherWrapper>\r\n          {jsxArray ? jsxArray : null}\r\n        </this.WeatherWrapper>\r\n      </this.Weather>\r\n    )\r\n  }\r\n}\r\n\r\nexport default DailyWeatherWidget;\r\n","import React, { Component } from 'react';\r\nimport CurrentWeatherWidget from './CurrentWeatherWidget';\r\nimport axios from 'axios';\r\nimport HourlyWeatherWidget from './HourlyWeatherWidget';\r\nimport DailyWeatherWidget from './DailyWeatherWidget';\r\n\r\n// eslint-disable-next-line react/prefer-stateless-function\r\nclass Weather extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    \r\n    this.state = {\r\n      apiRequestReady:false,\r\n      imperial:false,\r\n      location: {\r\n        latitude: null,\r\n        longitude: null,\r\n        city: null,\r\n        country: null,\r\n        displayName: null,\r\n        id: null,\r\n      },\r\n      currentWeather: {\r\n        temp: null,\r\n        weatherMain: null,\r\n        humidity: null,\r\n        icon: null,\r\n      },\r\n      hourlyWeather: [\r\n        {\r\n          temp: null,\r\n          weatherMain:  null,\r\n          icon: null,\r\n        }\r\n      ],\r\n      dailyWeather: [\r\n        {\r\n          temp: {\r\n            day: null,\r\n            night: null,\r\n          },\r\n          weatherMain: null,\r\n          humidity: null,\r\n          icon: null,\r\n        }\r\n      ]\r\n    }\r\n  }\r\n\r\n  getLocationFromIP = () => {\r\n    console.log(`response of IP api request below`);\r\n    axios.get('http://ip-api.com/json/')\r\n    .then(response => {\r\n      console.log(response);\r\n      this.setLocation(response, 'ip');\r\n      console.log(`response of IP api request above`);\r\n    })\r\n    .catch(err => console.log(err));\r\n  };\r\n\r\n  getLocationFromNavigator = () => {\r\n    window.navigator.geolocation.getCurrentPosition(this.setLocation);\r\n  }\r\n\r\n  setLocation = (position, from) => {\r\n    let latt, long;\r\n    console.log('position')\r\n    console.log(position)\r\n    if(from === 'ip') {\r\n      latt = position.data.lat;\r\n      long = position.data.lon;\r\n    } else {\r\n      latt = position.coords.latitude;\r\n      long = position.coords.longitude;\r\n    }\r\n    \r\n    console.log(`lat: ${latt}, long: ${long}`);\r\n    this.setState({\r\n      location: {\r\n        latitude: latt,\r\n        longitude: long,\r\n      }\r\n    });\r\n\r\n    this.callApi();\r\n  };\r\n\r\n  callApi = () => {\r\n    console.log('callApi called')\r\n    axios.get(`https://api.openweathermap.org/data/2.5/onecall?lat=${this.state.location.latitude}&lon=${this.state.location.longitude}&&appid=997d9b54abada6ff84291820778b192d`)\r\n    .then(response => this.handleOneCallResponse(response))\r\n    .catch(err => console.log(err));\r\n\r\n    axios.get(`https://us1.locationiq.com/v1/reverse.php?key=pk.026f9b5e94ef539558116a8c355cd29f&lat=${this.state.location.latitude}&lon=${this.state.location.longitude}&zoom=10&format=json`)\r\n    .then(response => this.handleLocationResponse(response))\r\n    .catch(err => console.log(err));\r\n  }\r\n\r\n  handleOneCallResponse = (response) => {\r\n    console.log(\"the response from openweathermap api below\");\r\n    console.log(response);\r\n    console.log(\"the response from openweathermap api above\");\r\n\r\n    //current weather config\r\n    let currentWeatherObject = {\r\n      temp: response.data.current.temp,\r\n      weatherMain: response.data.current.weather[0].main,\r\n      humidity: response.data.current.humidity,\r\n      icon: response.data.current.weather[0].icon,\r\n    };\r\n\r\n    //hourly weather config\r\n    let hourlyWeatherArray = [];\r\n    response.data.hourly.forEach(nthHour => {\r\n      if(response.data.hourly.indexOf(nthHour) < 24) {\r\n        let hour = {\r\n          temp: nthHour.temp,\r\n          weatherMain: nthHour.weather[0].main,\r\n          icon: nthHour.weather[0].icon,\r\n        }\r\n        hourlyWeatherArray.push(hour)\r\n      }\r\n    });\r\n\r\n    //daily weather config\r\n    let dailyWeatherArray = [];\r\n    response.data.daily.forEach(nthDay => {\r\n      if(response.data.daily.indexOf(nthDay) < 8) {\r\n        let day = {\r\n          temp: {\r\n            day: nthDay.temp.day,\r\n            night: nthDay.temp.night,\r\n          },\r\n          weatherMain: nthDay.weather[0].main,\r\n          humidity: nthDay.humidity,\r\n          icon: nthDay.weather[0].icon,\r\n        }\r\n        dailyWeatherArray.push(day)\r\n      }\r\n    })\r\n\r\n    //state update\r\n    this.setState({\r\n      apiRequestReady: true,\r\n      currentWeather: currentWeatherObject,\r\n      hourlyWeather: hourlyWeatherArray,\r\n      dailyWeather: dailyWeatherArray\r\n    })\r\n\r\n  }\r\n\r\n  handleLocationResponse = (response) => {\r\n    console.log(\"the response from locationIq api below\");\r\n    console.log(response);\r\n    console.log(\"the response from locationIq api above\");\r\n\r\n    const {lat, lon, address, display_name} = response.data;\r\n\r\n    this.setState(\r\n      {\r\n        location: {\r\n          latitude: lat,\r\n          longitude:  lon,\r\n          city: (address.city? address.city : null),\r\n          country: address.country,\r\n          displayName: display_name,\r\n        }\r\n      }\r\n    )\r\n  }\r\n\r\n  componentDidMount() {\r\n\r\n    this.getLocationFromIP()\r\n        \r\n  }\r\n    \r\n  render() {\r\n    return (\r\n      <div>\r\n        <CurrentWeatherWidget \r\n          city={this.state.location.city} country={this.state.location.country} displayName={this.state.location.displayName}\r\n          temp={this.state.currentWeather.temp} main={this.state.currentWeather.weatherMain} humidity={this.state.currentWeather.humidity} icon={this.state.currentWeather.icon}\r\n          imperial={this.state.imperial}\r\n          locationHandler={this.getLocationFromNavigator}\r\n        />\r\n        <HourlyWeatherWidget weather={this.state.hourlyWeather} imperial={this.state.imperial} />\r\n        <DailyWeatherWidget weather={this.state.dailyWeather} imperial={this.state.imperial} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Weather\r\n","// import logo from './logo.svg';\nimport React from 'react';\nimport 'semantic-ui-css/semantic.min.css'\nimport './App.css';\nimport Weather from './components/Weather';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Weather />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}